#!/usr/bin/env node

//import {} from 'commander'
const cmd = require('commander')
const pkg = require("../package.json")
const fs = require("fs");

cmd
    .version(pkg.version)
    .usage("[options] <[name=]file>â€¦")
    .description(pkg.description)
    .option("-i, --input <file>", "input file name")
    .option("-o, --output <folder>", "output folder", "out/")
    .option("-c, --crs <EPSG code>", "EPSG code of the grid Coordinate Reference System", "")
    .option("-t, --tileSizeCell <number>", "The size of the tile in number of cells", 128)
    .option("-x, --originPointX <number>", "The X coordinate of the tiling scheme origin point", 0)
    .option("-y, --originPointY <number>", "The Y coordinate of the tiling scheme origin point", 0)
    .option("-r, --resolutionGeo <number>", "The grid resolution, that is the size of a grid cell in the CRS unit")
    //.on('--help', () => { console.log('show help') })
    .parse(process.argv);

//console.log(cmd.args)
//console.log("hello world from grid tiler !")
//console.log(cmd.input, cmd.output)


if (!cmd.input)
    console.error("Missing parameter: -i, --input")
if (!cmd.resolutionGeo)
    console.error("Missing parameter: -res, --resolutionGeo")


//create tiling info object
const info = {
    dims: [],
    crs: cmd.crs,
    tileSizeCell: cmd.tileSizeCell,
    originPoint: {
        x: cmd.originPointX,
        y: cmd.originPointY
    },
    resolutionGeo: cmd.resolutionGeo,
    tilingBounds: {
        yMin: undefined,
        yMax: undefined,
        xMax: undefined,
        xMin: undefined
    }

}





//save info.json
const jsonData = JSON.stringify(info, null, 3);
fs.writeFile(cmd.output + "info.json", jsonData, function (err) {
    if (err) console.log(err); else console.log("info.json saved")
});




//info.json
/*/if does not exists, create and return
if (!fs.existsSync(cmd.output + "info.json")) {
    console.log("No info.json file in output folder " + cmd.output)
    fs.mkdirSync(cmd.output, { recursive: true })
    const infoDefault = {
        dims: [],
        crs: "",
        tileSizeCell: 128,
        originPoint: {
            x: 0,
            y: 0
        },
        resolutionGeo: 1
    }
    //TODO
    //save
    const jsonData = JSON.stringify(infoDefault, null, 3);
    fs.writeFile(cmd.output + "info.json", jsonData, function (err) {
        if (err) {
            console.log(err);
        } else {
            console.log("New info.json file created in output folder " + cmd.output)
            console.log("Fill it and relaunch the process.")
        }
    });
    return
}

//load info.json
fs.readFile(cmd.output + "info.json", 'utf8', (err, data) => {
    if (err) {
        console.log(err);
        return
    }
    //parse JSON
    const info = JSON.parse(data)
    console.log(info);
});

*/